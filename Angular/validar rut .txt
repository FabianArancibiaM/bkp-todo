
Regex
(^\\d{0,3})\\.{0,1}(\\d{0,3})\\.{0,1}(\\d{1,3})$
"value": "(^\\d{0,3})\\.{0,1}(\\d{0,3})\\.{0,1}(\\d{1,3})$",
--- metod validador
 validateRut(value) {
    const jsonValue: any = JSON.parse(value);
    const chileanRut: string = jsonValue.applicants.primaryConsumer.rut.replace(new RegExp('\\.', 'g'), '');
    const dv: string = jsonValue.applicants.primaryConsumer.dv;
    if (!this.rutValidatorService.validateRut(chileanRut.concat(dv))) {
      this.uiErrorHandlers.addError('Rut ' + chileanRut + ' es invÃ¡lido');
      this.errorIsPresented = true;
      return false;
    } else {
      this.uiErrorHandlers.clearErrors();
      this.errorIsPresented = false;
      return true;
    }
  }
  
  calculateDv = (chileanRutField: WatchedParameter, dvField: WatchedParameter) => {
    const rut: string = chileanRutField.getWatchedFieldHelper().getFieldValue().replace(/\./g, '');
    const amount = rut.replace(/\./g, '');
    if (!isNaN(Number(amount))) {
      if (rut.length > 0) {
        dvField.getWatchedFieldHelper().setFieldValue(this.rutValidatorService.calculateRutVerificator(rut));
        return;
      }
    }
    dvField.getWatchedFieldHelper().setFieldValue('');
  }
///////////////////////////////////////////////////////////////////////////////////////////////////
@Injectable()
export class RutValidatorService {

  constructor() { }

  public validateRut(rutToValidate: String): Boolean {
    const sanitizeRut = this.sanitizeRut(rutToValidate);
    let digitVerificator;
    let rutNumber;
    const isValidRut = true;

    if (sanitizeRut.length > 7) {
      digitVerificator = sanitizeRut.charAt(sanitizeRut.length - 1);
      rutNumber = sanitizeRut.substring(0, sanitizeRut.length - 1);

      if (!this.isNumeric(rutNumber)) {
        return !isValidRut;
      }

      if (!this.validDigitVerificator(digitVerificator)) {
        return !isValidRut;
      }

      if (this.calculateRutVerificator(rutNumber) === this.converCharToNumeric(digitVerificator) ||
        this.calculateRutVerificator(rutNumber) === (digitVerificator as string).toUpperCase()) {
        return isValidRut;
      }
    }
    return !isValidRut;
  }

  private sanitizeRut(rut: String): String {
    let sanitizeRut = rut.trim();
    sanitizeRut = sanitizeRut.replace('-', '');
    return sanitizeRut;
  }

  private isNumeric(value: String) {
    return !isNaN(Number(value));
  }

  private validDigitVerificator(digitVerificator: String): Boolean {
    const isDigitVerfNumeric = this.isNumeric(digitVerificator);
    const isDigitVerLetterK = 'K' === digitVerificator.toUpperCase();
    return isDigitVerfNumeric || isDigitVerLetterK;
  }

  public calculateRutVerificator(rutNumber: String) {
    let multipleyer = 2;
    let sum = 0;

    for (let i = rutNumber.length - 1; i >= 0; i--) {
      if (multipleyer === 8) {
        multipleyer = 2;
      }
      sum += this.converCharToNumeric(rutNumber.charAt(i)) * multipleyer;
      multipleyer++;
    }
    return this.calculateDigVerificator(sum);
  }

  private calculateDigVerificator(sum: number) {
    if (sum % 11 === 0) {
      return 0;
    }
    const digitVerificator = 11 - (sum % 11);
    return digitVerificator !== 10 ? digitVerificator : 'K'.toLocaleUpperCase();
  }

  private converCharToNumeric(stringNumber: String): number {
    return Number(stringNumber);
  }
}
